http://jwiegley.github.io/git-from-the-bottom-up/
http://shafiul.github.io/gitbook/1_the_git_object_model.html

Git
----

Add
----
Add file to index and create an object out of it. Store the object in .git/objects/hash[0:2]/hash[2:]
Files are stored as blobs
To get the structure, check the python code
The blob structure is

blob object: zlib.compress('blob [content size]\0content')

Commit
------
Create a tree object and create a commit object

tree object: zlib.compress('tree [content size]\0[Object Entries]')
where object entries are: [mode] [Object name]\0[SHA-1 in binary format]

mode: In this case, you’re specifying a mode of 100644, which means it’s a normal file. 
Other options are 100755, which means it’s an executable file; and 120000, which specifies a symbolic link.


commit object: zlib.compress('commit {size}\0{content}')
where content:
tree {tree_sha}
{parents}
author {author_name} <{author_email}> {author_date_seconds} {author_date_timezone}
committer {committer_name} <{committer_email}> {committer_date_seconds} {committer_date_timezone}

{commit message}

where:
{tree_sha}: SHA of the tree object this commit points to. This represents the top-level Git repo directory.
            That SHA comes from the format of the tree object.
{parents}: optional list of parent commit objects of form:
			parent {parent1_sha}
			parent {parent2_sha}
			...
			The list can be empty if there are no parents, e.g. for the first commit in a repo.
			Two parents happen in regular merge commits.
			More than two parents are possible with git merge -Xoctopus, but this is not a common workflow. Here is an example: https://github.com/cirosantilli/test-octopus-100k
{author_name}: e.g.: Ciro Santilli. Cannot contain <, \n
{author_email}: e.g.: cirosantilli@mail.com. Cannot contain >, \n
{author_date_seconds}: seconds since 1970, e.g. 946684800 is the first second of year 2000
{author_date_timezone}: e.g.: +0000 is UTC
committer fields: analogous to author fields
{commit message}: arbitrary.

Branches
---------
Branches are done using refs. In .git/refs/heads/[branch name] you have a pointer to a hash
the HEAD file is pointing to the file. If we are on master the content of HEAD is
HEAD
----
ref: refs/head/master

In case we are on a branch called test, the content of HEAD is
ref: refs/head/test
